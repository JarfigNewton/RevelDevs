<br />
<div class="booyah-box col-10 offset-1 show-width">
  <h2 class="text-center"><%= @game.name %></h2>
  <br />
  <div id="notice" data-check-status=
    <% if @game.in_check?('white') %>
      <%= 'white' %>
    <% elsif @game.in_check?('black') %>
      <%= 'black' %>
    <% end %>
    >
    <br /></div>
  <div id="invalid-move"><br /></div>
  <div id="game-state" data-game-state=<%= "#{@game.state}" %>></div>
</div>
<br />
<head>
  <meta charset="UTF-8">
</head>
<body>
  <div class="chessboard" id=<%= "#{@game.id}" %>>
    <% for row in (1..8) %>
      <% for col in (1..8) %>
        <div class="square 
          <% if row % 2 != 0 %>
            <%= col % 2 != 0 ? 'white' : 'black' %>
          <% else %>
            <%= col % 2 == 0 ? 'white' : 'black' %>
          <% end %>" 
          data-x=<%= "#{col}" %> 
          data-y=<%= "#{9 - row}" %> 
          <% piece = @game.pieces.active.find_by( { x: col , y: 9 - row } ) %>
          data-piece-id=
          <% if piece %>
            "<%= piece.id %>"
          <% else %>
            "<%= '' %>"
          <% end %> 
          id=<%= "#{col}-#{9 - row}" %>
          >
          <% if piece %>
            &<%= "#{piece.icon}" %>;
          <% end %>
        </div>
      <% end %>
    <% end %>
  </div>
</body>

<script src="https://www.gstatic.com/firebasejs/4.9.1/firebase.js"></script>
<script>
  $(function() {
    var config = {
      apiKey: "AIzaSyDacQxiuyLkxP5WfVxcb4fUoKHlGB94jOk",
      authDomain: "chess-application.firebaseapp.com",
      databaseURL: "https://chess-application.firebaseio.com",
      projectId: "chess-application",
      storageBucket: "chess-application.appspot.com",
      messagingSenderId: "660815863001"
    };
    firebase.initializeApp(config);
  });

</script>

<script>
  $(function() {
    var $square = $('.square');
    var gameID = $('.chessboard').attr('id');
    var dbRef = firebase.database().ref(); //references the Firebase db
    var gameRef = dbRef.child(gameID); //references the games' database within Firebase

    gameRef.onDisconnect().remove();

    $('.square').each(function(){
      var squareID = $(this).attr('id'); //grabs square ID
      var squareText = $(this).text(); //grabs square text
      var gameRefSquare = gameRef.child(squareID); //Firebase can reference each square
      gameRefSquare.set(squareText); //sets Firebase db value for each square
      //listens for changes to the database at all times - begins when game is initialized
      gameRefSquare.on('value', function(snapshot){
        $('#' + squareID).html(snapshot.val()); //updates square html with current db value
      });
    });

    var gameRefNotice = gameRef.child('notice');
    var $gameState = $('#game-state').attr('data-game-state');
    var $checkStatus = $('#notice').attr('data-check-status');
    if($gameState === 'pending') {
      gameRefNotice.set('<div align="center">' + 'Waiting for second player to join...' + '</div>');
    } else if($checkStatus) {
      gameRefNotice.set('<div class="in-check" align="center">' + 'The ' + $checkStatus + ' player is in check!' + '</div>');
    } else if($gameState === 'white_turn') {
      gameRefNotice.set('<div class="white-turn" align="center">' + 'It\'s the white player\'s turn' + '</div>');
    } else if($gameState === 'black_turn') {
      gameRefNotice.set('<div class="black-turn" align="center">' + 'It\'s the black player\'s turn' + '</div>');
    } else if($gameState === 'checkmate') {
      gameRefNotice.set('<div class="winner" align="center">' + 'The game is over!' + '</div>');
    }
    gameRefNotice.on('value', function(snapshot){
      $('#notice').html(snapshot.val());
    });

    $square.click( function() {
      var $xPosition = $(this).data('x');
      var $yPosition = $(this).data('y');
      var $targetSquare = $(this);
      var $targetPiece = $targetSquare.attr('data-piece-id');
      var $selectedSquare = $('.selected');
      var $isPieceSelected = $square.hasClass('selected');
      var $selectedPiece = $selectedSquare.attr('data-piece-id');
      // If a piece is already selected, the click attempts to move the piece
      // (Unless the selected square is clicked)
      if ($isPieceSelected && !($selectedSquare.data('x') === $xPosition && $selectedSquare.data('y') === $yPosition)) {
        updatePiece();
      }

      // If no square is selected and a piece is present, the clicked square will become selected
      if (!$isPieceSelected && $targetPiece != null) {
        // After a piece is moved it's not able to be
        // selected again. Other pieces (of the correct color) can be selected though.
        // The piece ID isn't getting passed to the URL on the failing GET request.
        $.get('/pieces/' + $targetPiece, function() {
          $targetSquare.addClass('selected');
        });
      }
      // If a square is already selected, the click will remove the selection
      else {
        $selectedSquare.removeClass('selected');
      }

      function updatePiece() {
        $.ajax({
          type: 'PATCH',
          url: '/pieces/' + $selectedPiece,
          dataType: 'json',
          data: { piece: { x: $xPosition, y: $yPosition } },
          success: function(data){
            // If the move is allowed, the target square will populate with the piece
            // and empty out the original square
            $targetSquare.attr('data-piece-id', $selectedPiece);
            $targetSquare.html("&" + data.icon + ";");
            $selectedSquare.empty();
            $selectedSquare.removeAttr('data-piece-id');
            updateFirebase($targetSquare, $selectedSquare, data);
            updateRookWhenCastling(data);
          },
          error: function(){
            $('#invalid-move').html('<div class="error" align="center">' + 'That is an invalid move' + '</div>');
            $('#invalid-move').fadeOut(3000);
            setTimeout(function() {
              $('#invalid-move').html('<br />').fadeIn("fast");
            }, 3000);
          }
        });
      }

      function updateFirebase(targetSquare, selectedSquare, data){
        var gameRefTargetSquare = gameRef.child(targetSquare.attr('id')); //pulls target square
        var gameRefSelectedSquare = gameRef.child(selectedSquare.attr('id')); //pulls selected square

        gameRefTargetSquare.set(targetSquare.text()); //sets new value for target square
        gameRefSelectedSquare.set(selectedSquare.text()); //sets new value for selected square
        flashNotice(data);
      }

      function updateRookWhenCastling(data) {
        if(data.rook_before_x) {
          var $rookStartingSquare = $('#' + data.rook_before_x + '-' + data.rook_before_y);
          var $rookID = $rookStartingSquare.attr('data-piece-id');
          var $rookEndingSquare = $('#' + data.rook_after_x + '-' + data.rook_after_y);
          $rookEndingSquare.attr('data-piece-id', $rookID);
          $rookEndingSquare.html($rookStartingSquare.html());
          $rookStartingSquare.empty();
          $rookStartingSquare.removeAttr('data-piece-id');
          updateFirebase($rookEndingSquare, $rookStartingSquare);
        }
      }

      function flashNotice(data){
        if(data.winner) {
          gameRefNotice.set('<div class="winner" align="center">' + 'The ' + data.winner + ' player is the winner!' + '</div>');
        } else if(data.check) {
          gameRefNotice.set('<div class="in-check" align="center">' + 'The ' + data.check + ' player is in check!' + '</div>');
        } else if(data.game_state === 'white_turn') {
          gameRefNotice.set('<div class="white-turn" align="center">' + 'It\'s the white player\'s turn' + '</div>');
        } else if(data.game_state === 'black_turn') {
          gameRefNotice.set('<div class="black-turn" align="center">' + 'It\'s the black player\'s turn' + '</div>');
        }
      }
    });
  });
</script>
